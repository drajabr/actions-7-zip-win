name: setup 7-Zip action
description: Download and unpack 7-Zip for GitHub Actions

inputs:
  token:
    description: GitHub personal access token
    default: ${{ github.token }}
  tag:
    description: Release tag
    default: latest
  in:
    description: Input file or directory to compress (optional)
    required: false
  out:
    description: Output archive path (optional, defaults to <in>.7z)
    required: false
  options:
    description: Options passed to 7z (default "a -t7z")
    default: a -tzip

runs:
  using: composite
  steps:
    - name: Set WORKING_DIRECTORY env var
      shell: powershell
      run: |
        $cwd = "${{ runner.temp }}"
        "WORKING_DIRECTORY=$cwd" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Download 7-Zip binary
      id: win32_download_7z
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $arch = if ($env:PROCESSOR_ARCHITECTURE -eq "AMD64") { "x64" } else { $env:PROCESSOR_ARCHITECTURE.ToLower() }
        $ext = "exe"
        $wildcard = "7z*.$ext"
        $archWildcard = "7z*-$arch.$ext"

        $headers = @{
          Authorization = "Bearer $env:token"
          "Content-Type" = "application/json"
        }

        $uri = if ($env:tag -eq "latest") {
          "https://api.github.com/repos/ip7z/7zip/releases/latest"
        } else {
          "https://api.github.com/repos/ip7z/7zip/releases/tags/$($env:tag)"
        }

        $response = Invoke-RestMethod -Uri $uri -Headers $headers
        $assets = $response.assets | Where-Object { $_.name -like $wildcard }
        $asset = $assets | Where-Object { $_.name -like $archWildcard } | Select-Object -First 1
        if (-not $asset) {
          $asset = $assets | Select-Object -First 1
        }

        $outPath = Join-Path $env:WORKING_DIRECTORY $asset.name
        Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $outPath -Headers $headers

        "exe=$($asset.name)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      env:
        token: ${{ inputs.token }}
        tag: ${{ inputs.tag }}

    - name: Install 7-Zip
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $exe = Join-Path $env:WORKING_DIRECTORY "${{ steps.win32_download_7z.outputs.exe }}"
        $target = Join-Path $env:WORKING_DIRECTORY "7-Zip"
        Write-Host "Installing 7-Zip to $target"
        & $exe /S /D=$target

        "$target" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        "7zEXE=$target\7z.exe" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Execute 7-Zip (if input specified)
      if: runner.os == 'Windows' && inputs.in != ''
      shell: powershell
      run: |
        $in = "${{ inputs.in }}"
        $options = "${{ inputs.options }}"
        $out = if ([string]::IsNullOrWhiteSpace("${{ inputs.out }}")) { "$in.7z" } else { "${{ inputs.out }}" }
        
        # Replace -sfx7z.sfx with full path to actual SFX module
        $sfxModule = Join-Path $env:WORKING_DIRECTORY "7-Zip\7z.sfx"
        $options = $options -replace '-sfx7z\.sfx', "-sfx`"$sfxModule`""
        
        $cmd = "$env:7zEXE`" $options `"$out`" `"$in`""
        Write-Host "Running: $cmd"
        Invoke-Expression &$cmd
