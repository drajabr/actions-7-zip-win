name: setup 7-Zip action
description: download and unpack 7-Zip for gh actions
inputs:
  token:
    description: github personal access token
    default: ${{ github.token }}

  tag:
    description: release tag
    default: latest
    
  in:
    description: input file or directory to compress (Optional, will just download if unspecfied)
    required: false

  out:
    description: output archive path (optional, defaults to <in>.7z)
    required: false

  options:
    description: options passed to 7z (default "a -t7z")
    default: a -t7z

    
runs:
  using: composite
  steps:
    - name: Set WORKING_DIRECTORY env var
      shell: powershell
      run: |
        $cwd = (Get-Item .).FullName
        echo "WORKING_DIRECTORY=$cwd" >> $env:GITHUB_ENV
    - name: Print working directory
      shell: powershell
      run: echo "Working dir is $env:WORKING_DIRECTORY"
    # impl for Windows operating systems
    - name: download 7-Zip
      id: win32_download_7z
      if: runner.os == 'Windows'
      shell: powershell
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # resolve arch
        $arch = $env:PROCESSOR_ARCHITECTURE.ToLower()

        if ($arch -eq "amd64")
        {
          $arch = "x64"
        }

        # stub resolve ext
        $ext = "exe"

        # build a var for testing jq response
        $name_wildcard_ext = "7z*.$ext"
        $name_wildcard_arch_ext = "7z*-$arch.$ext"

        # build headers
        $headers = @{
          "Authorization" = "Bearer $env:token"
          "Content-Type"  = "application/json"
        }

        # build uri
        $uri = if ($env:tag -eq "latest")
        {
          "https://api.github.com/repos/ip7z/7zip/releases/latest"
        }
        else
        {
          "https://api.github.com/repos/ip7z/7zip/releases/tags/$env:tag"
        }

        # download 7-Zip
        $response = Invoke-RestMethod -Uri $uri -Headers $headers
        $assets = $response.assets | Where-Object { $_.name -like $name_wildcard_ext }

        $obj = $assets | Where-Object { $_.name -like $name_wildcard_arch_ext }
        if (-not $obj)
        {
          $obj = $assets | Where-Object { $_.name -notlike $name_wildcard_arch_ext }
        }

        Invoke-WebRequest -Uri $obj.browser_download_url -OutFile $obj.name -Headers $headers

        "exe=$($obj.name)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      env:
        token: ${{ inputs.token }}
        tag: ${{ inputs.tag }}

    # TODO(mmacieje): `&` in powershell case does not do it here, unforunately
    - name: unpack 7-Zip
      if: runner.os == 'Windows'
      shell: cmd
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: call ${{ steps.win32_download_7z.outputs.exe }} /S /D=${{ env.WORKING_DIRECTORY }}\7-Zip
      
    - name: Excute 7-Zip command
      if: runner.os == 'Windows' && !(inputs.in == '')
      shell: powershell
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        $in = "${{ inputs.in }}"
        $options = "${{ inputs.options }}"
        $out = if ([string]::IsNullOrWhiteSpace("${{ inputs.out }}")) { "$in.7z" } else { "${{ inputs.out }}" }

        $cmd = "7z $options `"$out`" `"$in`""
        Write-Host "Running: $cmd"
        Invoke-Expression $cmd
